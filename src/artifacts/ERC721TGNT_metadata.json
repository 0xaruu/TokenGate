{
	"compiler": {
		"version": "0.8.17+commit.8df45f5f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "name_",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "symbol_",
						"type": "string"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "addr",
						"type": "address"
					}
				],
				"name": "AlreadyOwnsToken",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "NonExistentTokenId",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "addr",
						"type": "address"
					}
				],
				"name": "OnERC721ReceivedNotOk",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "TransferAndApprovalsDisabled",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ZeroAddressQuery",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_approved",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_operator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "_approved",
						"type": "bool"
					}
				],
				"name": "ApprovalForAll",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "getApproved",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "isApprovedForAll",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "ownerOf",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"name": "setApprovalForAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "tokenURI",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "By token gating, we optimize for 1 NFT per wallet (as a specific use case)       NFT - Wallet is 1 to 1, so the address is used as tokenId",
			"errors": {
				"AlreadyOwnsToken(address)": [
					{
						"details": "Error that is thrown when addr already has 1 token",
						"params": {
							"addr": "The address that already owns 1 token"
						}
					}
				],
				"NonExistentTokenId(uint256)": [
					{
						"details": "Error that is thrown whenever an Invalid NFTs is queried"
					}
				],
				"OnERC721ReceivedNotOk(address)": [
					{
						"details": "Error that is thrown when receiver address is a smart contract       and doesn't implement onERC721Received correctly",
						"params": {
							"addr": "The address that already owns 1 token"
						}
					}
				],
				"TransferAndApprovalsDisabled()": [
					{
						"details": "Error that is thrown whenever transfers or approvals are called"
					}
				],
				"ZeroAddressQuery()": [
					{
						"details": "Error that is thrown whenever an address for Invalid NFTs is queried"
					}
				]
			},
			"kind": "dev",
			"methods": {
				"approve(address,uint256)": {
					"details": "Throws always, (Non-Transferable token)       Emits a {Approval} event"
				},
				"balanceOf(address)": {
					"details": "Throws {ZeroAddressQuery} when queried for 0x0 address",
					"params": {
						"_owner": "Address that the balance queried"
					},
					"returns": {
						"_0": "Number of NFTs owned (0 or 1)"
					}
				},
				"constructor": {
					"details": "constructor",
					"params": {
						"name_": "A descriptive name for a collection of NFTs in this contract",
						"symbol_": "An abbreviated name for NFTs in this contract"
					}
				},
				"getApproved(uint256)": {
					"details": "Throws if `_tokenId` is not a valid NFT.",
					"params": {
						"_tokenId": "The NFT to find the approved address for"
					},
					"returns": {
						"_0": "The zero address, because Approvals are disabled"
					}
				},
				"isApprovedForAll(address,address)": {
					"returns": {
						"_0": "False, because approvalForAll is disabled"
					}
				},
				"ownerOf(uint256)": {
					"details": "Throws {NonExistentToken} when `_tokenId`is invalid (not minted)",
					"params": {
						"_tokenId": "The identifier for an NFT"
					},
					"returns": {
						"_0": "The address of the owner of the NFT"
					}
				},
				"safeTransferFrom(address,address,uint256)": {
					"details": "This works identically to the other function with an extra data parameter,       except this function just sets data to \"\"."
				},
				"safeTransferFrom(address,address,uint256,bytes)": {
					"details": "Throws always, (Non-Transferable token)       Emits a {Transfer} event"
				},
				"setApprovalForAll(address,bool)": {
					"details": "Throws always, (Non-Transferable token)       Emits a {ApprovalForAll} event"
				},
				"supportsInterface(bytes4)": {
					"details": "Override {IERC165-supportsInterface} to add the supported interfaceIds"
				},
				"tokenURI(uint256)": {
					"details": "Throws if `_tokenId` is not a valid NFT       Empty by default, can be overridden in child contracts."
				},
				"transferFrom(address,address,uint256)": {
					"details": "Throws always, (Non-Transferable token)       Emits a {Transfer} event  Emits a {Transfer} event"
				}
			},
			"stateVariables": {
				"_owners": {
					"details": "Mapping from address to bool (tokenId IS the owner address)"
				}
			},
			"title": "ERC-721-GNT - Non-Fungible Token Standard optimized for Gating          (Non-Transferable) only 1 per Wallet",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"approve(address,uint256)": {
					"notice": "Change or reaffirm the approved address for an NFT"
				},
				"balanceOf(address)": {
					"notice": "Count all NFTs assigned to an owner, in this case, only 0 or 1"
				},
				"getApproved(uint256)": {
					"notice": "Get the approved address for a single NFT"
				},
				"isApprovedForAll(address,address)": {
					"notice": "Query if an address is an authorized operator for another address"
				},
				"name()": {
					"notice": "A descriptive name for a collection of NFTs in this contract"
				},
				"ownerOf(uint256)": {
					"notice": "Finds the owner of an NFT"
				},
				"safeTransferFrom(address,address,uint256)": {
					"notice": "Transfers the ownership of an NFT from one address to another address"
				},
				"safeTransferFrom(address,address,uint256,bytes)": {
					"notice": "Transfers ownership of an NFT from one address to another address"
				},
				"setApprovalForAll(address,bool)": {
					"notice": "Enable or disable approval for a third party (\"operator\") to manage   all of `msg.sender`'s assets"
				},
				"symbol()": {
					"notice": "An abbreviated name for NFTs in this contract"
				},
				"tokenURI(uint256)": {
					"notice": "A distinct Uniform Resource Identifier (URI) for a given asset."
				},
				"transferFrom(address,address,uint256)": {
					"notice": "Transfers ownership of an NFT from one address to another           -- CALLER IS RESPONSIBLE IF `_to` IS NOT CAPABLE OF             RECEIVING NFTS (THEY MAY BE PERMANENTLY LOST)"
				}
			},
			"notice": "Since it's Non-Transferable, approve, approveForAll, and transfers always throw          (\"Read Only NFT Registry\" from https://eips.ethereum.org/EIPS/eip-721#rationale)          None of these methods emit Events",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"ERC721TGNT.sol": "ERC721TGNT"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"ERC165.sol": {
			"keccak256": "0x4a1c1a4bada4931e6489301f17bd1e2efaa540c1fe68cabbf1dee075c2f50287",
			"license": "MIT",
			"urls": [
				"bzz-raw://8908d475701b85a253064d0cda92c463e98a425e74a071026ebc336e0dc76e55",
				"dweb:/ipfs/QmfUL6fDovvFN9ptxCNCYtN9a3nexeRnXeAT8gn6hTiNfj"
			]
		},
		"ERC721TGNT.sol": {
			"keccak256": "0xe9356b0395b1ebb7e701995e320fbb45483a0756a98201a065dcee5a45ed3a15",
			"license": "MIT",
			"urls": [
				"bzz-raw://bb79f166111acf5e69809fe895ae99821f633d1ff982b2b86ab0df3f898a57a7",
				"dweb:/ipfs/QmVkv5VbVDR4YcUpVriXtQNTWH3jnKjeffanCARKbd85H2"
			]
		},
		"interfaces/IERC165.sol": {
			"keccak256": "0x4896ff3e820a24b09452045d80d5955c37bbf3737fe57bdcddf50855f760c081",
			"license": "MIT",
			"urls": [
				"bzz-raw://a746da735ae426d136c09be826a4b77d1167a98947a249405108fec0a0de2610",
				"dweb:/ipfs/Qmd4SxtNmSehtszrchAsUG8qKKzuLUy1imo7jcMU9xDJ4X"
			]
		},
		"interfaces/IERC721.sol": {
			"keccak256": "0x3fc300e56c8e1ed6e9a79118e320cf554872a7c6b06e9979cea8225644d27837",
			"license": "MIT",
			"urls": [
				"bzz-raw://ca10f8525f96bb139c8371ae0385b13dfe91bc2c302ccd0d51eadd0c36b919ca",
				"dweb:/ipfs/QmU4Dn1QA1pW8asJTcHNmg2N69nAFA7asibSfH3HRYqPtP"
			]
		},
		"interfaces/IERC721TokenReceiver.sol": {
			"keccak256": "0x6ed7b8b4320e42594a8965669f39f76bc89acff9b217f6b087aedc47f23423c1",
			"license": "MIT",
			"urls": [
				"bzz-raw://6cbf6571d023c804012134c6e5cda5c265aa6a3c2cba18c14b2354201e728c3b",
				"dweb:/ipfs/QmTfXNcHwYqfQ4jpKrfNycLoA41ZVcDj83PHwEWrxEks8D"
			]
		},
		"interfaces/extensions/IERC721Metadata.sol": {
			"keccak256": "0x09ec6d310adc8bcd8fa3eadbc331f32b6b0c311560c02310357fcf33ccfb105a",
			"license": "MIT",
			"urls": [
				"bzz-raw://28c6173e14db69a6a4c768b1f9f32e8de5b3373b08603630127614bb6a9fb1f2",
				"dweb:/ipfs/QmTkaB9KH9ZuHh19tzB2FDeYPkviGusyLrNyFXbLnU4h15"
			]
		}
	},
	"version": 1
}